<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MAX_LENGTH" xml:space="preserve">
    <value>O campo {0} deve conter até {1} caracteres</value>
    <comment>Verifica se o campo especificado tem a quantidade máxima de caracteres exigida</comment>
  </data>
  <data name="MIN_LENGTH" xml:space="preserve">
    <value>O campo {0} deve conter no mínimo {1} caracteres</value>
    <comment>Verifica se o campo especificado tem o mínimo de caracteres exigidos</comment>
  </data>
  <data name="POSITIVE_VALUE" xml:space="preserve">
    <value>O campo {0} deve ser um número positivo</value>
    <comment>Verifica se o campo especificado contém apenas números positivos a partir de 1</comment>
  </data>
  <data name="REQUIRED" xml:space="preserve">
    <value>O campo {0} é obrigatório</value>
    <comment>Verifica se o campo específico é nulo ou vazio</comment>
  </data>
  <data name="VALID_EMAIL" xml:space="preserve">
    <value>O campo {0} deve ser um e-mail válido</value>
    <comment>Verifica se o campo especificado é um e-mail válido</comment>
  </data>
  <data name="INVALID_DATE" xml:space="preserve">
    <value>O campo {0} deve ser uma data válida</value>
  </data>
  <data name="INVALID_TIME" xml:space="preserve">
    <value>O campo {0} deve ser um horário válido</value>
  </data>
  <data name="DATE_GREATER_THAN_CURRENT" xml:space="preserve">
    <value>O campo {0} deve ser maior que a data atual</value>
  </data>
  <data name="DATE_GREATER_THAN" xml:space="preserve">
    <value>O campo {0} deve ser uma data maior que {1}</value>
  </data>
  <data name="TIME_GREATER_THAN_CURRENT" xml:space="preserve">
    <value>O campo {0} deve ser maior que o horário atual</value>
  </data>
  <data name="INVALID_GUID" xml:space="preserve">
    <value>O campo {0} deve ser um valor UUID válido</value>
  </data>
  <data name="INVALID_BOOLEAN" xml:space="preserve">
    <value>O campo {0} deve ser um valor booleano válido</value>
  </data>
  <data name="DATE_PRESENT_PAST" xml:space="preserve">
    <value>O campo {0} deve ser uma data menor ou igual a atual</value>
  </data>
  <data name="Parser_ToGuid_Invalid_GUID_format___0_" xml:space="preserve">
    <value>Invalid GUID format: {0}</value>
  </data>
  <data name="Parser_ToEnum_Invalid_ENUM_value___0_" xml:space="preserve">
    <value>Invalid ENUM value: {0}</value>
  </data>
  <data name="Parser_ToDateOnly_Invalid_DateOnly_format___0_" xml:space="preserve">
    <value>Invalid DateOnly format: {0}</value>
  </data>
  <data name="Parser_ToTimeOnly_Invalid_TimeOnly_format___0_" xml:space="preserve">
    <value>Invalid TimeOnly format: {0}</value>
  </data>
  <data name="Parser_ToBool_Invalid_boolean_format___0_" xml:space="preserve">
    <value>Invalid boolean format: {0}</value>
  </data>
  <data name="ConnectionNotFound" xml:space="preserve">
    <value>O {0} com o id '{1}' não foi encontrado.</value>
  </data>
  <data name="MustBeAOneOfTheseValues" xml:space="preserve">
    <value>O campo {0} deve ser um dos seguintes valores: {1}.</value>
  </data>
  <data name="UserConnectionNotFound" xml:space="preserve">
    <value>O usuário com o id {0} não foi encontrado.</value>
  </data>
  <data name="UsersRepositoryNotAvailable" xml:space="preserve">
    <value>O repositório de usuários não está disponível.</value>
  </data>
  <data name="TimePresentPast" xml:space="preserve">
    <value>O campo {0} deve ser uma hora menor ou igual a atual</value>
  </data>
</root>