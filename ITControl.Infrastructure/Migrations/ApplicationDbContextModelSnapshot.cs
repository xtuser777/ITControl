// <auto-generated />
using System;
using ITControl.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITControl.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITControl.Domain.Appointments.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("ScheduledAt")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("ScheduledIn")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CallId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ITControl.Domain.Calls.Entities.Call", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CallStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<Guid?>("SystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CallStatusId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("SystemId");

                    b.HasIndex("UserId");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("ITControl.Domain.Calls.Entities.CallStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CallsStatuses");
                });

            modelBuilder.Entity("ITControl.Domain.Contracts.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("EndedAt")
                        .HasColumnType("date");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("StartedAt")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("ITControl.Domain.Contracts.Entities.ContractContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cellphone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractContacts");
                });

            modelBuilder.Entity("ITControl.Domain.Departments.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("554afc25-f71c-4532-99d9-11c93d2fe757"),
                            Alias = "SEMAD",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 267, DateTimeKind.Local).AddTicks(1639),
                            Name = "Secretaria Municipal de Administração",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(5808)
                        },
                        new
                        {
                            Id = new Guid("e8941d5a-86b1-4ffa-b588-e75435ef18d6"),
                            Alias = "SEGOV",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6056),
                            Name = "Secretaria Municipal de Governo",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6057)
                        },
                        new
                        {
                            Id = new Guid("282f17a5-3b9d-4d48-a33e-bbe9d6e9aea8"),
                            Alias = "SEPLAD",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6059),
                            Name = "Secretaria Municipal de Planejamento e Desenvolvimento Econômico",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6060)
                        },
                        new
                        {
                            Id = new Guid("f58b2e4d-074d-4194-9c28-30f585dcbd03"),
                            Alias = "SEDUC",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6061),
                            Name = "Secretaria Municipal de Educação",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6062)
                        },
                        new
                        {
                            Id = new Guid("37128323-75d9-4e05-a8b4-a782798afe1b"),
                            Alias = "SEMSA",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6063),
                            Name = "Secretaria Municipal de Saúde",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6063)
                        },
                        new
                        {
                            Id = new Guid("328b1cce-b060-4da9-9add-a8ddd5ade8d2"),
                            Alias = "SEMAG",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6065),
                            Name = "Secretaria Municipal de Serviços Gerais",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6065)
                        },
                        new
                        {
                            Id = new Guid("66fa52c4-9b1a-40d4-9773-9e6e7f8ff0e2"),
                            Alias = "SECULT",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6067),
                            Name = "Secretaria Municipal de Cultura e Turismo",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6067)
                        },
                        new
                        {
                            Id = new Guid("31e3a28d-15fa-4ef2-8f78-e5a454995eb7"),
                            Alias = "SEACT",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6069),
                            Name = "Secretaria Municipal de Assistência Social e Cidadania",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6069)
                        },
                        new
                        {
                            Id = new Guid("8f9b94eb-2814-4e87-b310-680f140b54bf"),
                            Alias = "SEMEL",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6076),
                            Name = "Secretaria Municipal de Esporte e Lazer",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6077)
                        },
                        new
                        {
                            Id = new Guid("5a2f4d73-1685-4de2-94a2-612a816d38df"),
                            Alias = "SEFAZ",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6078),
                            Name = "Secretaria Municipal de Finanças",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6079)
                        },
                        new
                        {
                            Id = new Guid("1ad53241-877f-4fc6-86a8-91f227edf59b"),
                            Alias = "SEMAJ",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6080),
                            Name = "Secretaria Municipal de Assuntos Jurídicos",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6080)
                        },
                        new
                        {
                            Id = new Guid("dac99613-4007-4234-8ac9-99cab27dd860"),
                            Alias = "SEMAM",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6082),
                            Name = "Secretaria Municipal de Agricultura e Meio ambiente",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6082)
                        },
                        new
                        {
                            Id = new Guid("3d1aa0d9-e7b4-4de8-aed4-67c68e8c5659"),
                            Alias = "SMSP",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6083),
                            Name = "Secretaria Municipal de Segurança Pública",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6084)
                        },
                        new
                        {
                            Id = new Guid("0aad8c00-ddcc-475e-8868-028b6a206261"),
                            Alias = "SOURB",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6085),
                            Name = "Secretaria Municipal de Infraestrutura",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6085)
                        },
                        new
                        {
                            Id = new Guid("760ba9ca-b0ec-46e9-8c98-7defe2a0ce27"),
                            Alias = "COINTER",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6087),
                            Name = "Controladoria Interna",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6087)
                        },
                        new
                        {
                            Id = new Guid("57031570-2514-41fc-8e8b-ec2bb0d9857a"),
                            Alias = "GABINETE",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6089),
                            Name = "Gabinete do Prefeito",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 268, DateTimeKind.Local).AddTicks(6089)
                        });
                });

            modelBuilder.Entity("ITControl.Domain.Divisions.Entities.Division", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Divisions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25c13956-4296-46c6-bfce-4e8f28481e23"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 270, DateTimeKind.Local).AddTicks(9727),
                            DepartmentId = new Guid("554afc25-f71c-4532-99d9-11c93d2fe757"),
                            Name = "Divisão Municipal de Informática",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 270, DateTimeKind.Local).AddTicks(9733)
                        });
                });

            modelBuilder.Entity("ITControl.Domain.Equipments.Entities.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Rented")
                        .HasColumnType("bit");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("Ip")
                        .IsUnique();

                    b.HasIndex("Mac")
                        .IsUnique();

                    b.HasIndex("Tag")
                        .IsUnique();

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("ITControl.Domain.KnowledgeBases.Entities.KnowledgeBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("EstimatedTime")
                        .HasColumnType("time");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KnowledgeBases", (string)null);
                });

            modelBuilder.Entity("ITControl.Domain.Notifications.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Reference")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CallId");

                    b.HasIndex("TreatmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("ITControl.Domain.Pages.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("749dce02-ab9d-4610-baff-809eee894042"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4299),
                            Name = "users",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4308)
                        },
                        new
                        {
                            Id = new Guid("51a3f4d2-b040-4ca4-9f8d-28c3a7354f98"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4314),
                            Name = "roles",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4315)
                        },
                        new
                        {
                            Id = new Guid("60f79dd8-603c-4f9b-83eb-d4118cfea33a"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4316),
                            Name = "pages",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4316)
                        },
                        new
                        {
                            Id = new Guid("65c29c14-e103-4468-bf5d-940713b7ba2f"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4318),
                            Name = "positions",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4318)
                        },
                        new
                        {
                            Id = new Guid("d259704f-7392-4262-8890-4c0e43ebf29b"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4319),
                            Name = "departments",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4320)
                        },
                        new
                        {
                            Id = new Guid("75afe6a6-ab4c-4f60-8ce1-52482a25cd84"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4321),
                            Name = "divisions",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4321)
                        },
                        new
                        {
                            Id = new Guid("b15822c6-8530-44f4-8d17-724ec6023f54"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4323),
                            Name = "units",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4323)
                        },
                        new
                        {
                            Id = new Guid("073767f6-a715-4397-9512-21a923b7c32f"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4331),
                            Name = "contracts",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4331)
                        },
                        new
                        {
                            Id = new Guid("06272051-eb58-4c68-bd4f-ba269d84b7bf"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4333),
                            Name = "equipments",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4333)
                        },
                        new
                        {
                            Id = new Guid("e989adab-519e-48e0-a548-b1a7c8fe8c7a"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4334),
                            Name = "systems",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4334)
                        },
                        new
                        {
                            Id = new Guid("982d5605-d806-45b3-806b-d15d23fdc71d"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4336),
                            Name = "calls",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4336)
                        },
                        new
                        {
                            Id = new Guid("120b8a7c-25c4-40d6-857e-26c0cfd4ac53"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4337),
                            Name = "appointments",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4337)
                        },
                        new
                        {
                            Id = new Guid("38735ff2-3f73-4573-a376-18ac71f9f349"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4339),
                            Name = "treatments",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4339)
                        },
                        new
                        {
                            Id = new Guid("7c884fe4-1e55-4b10-b178-ce8ce37735f7"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4340),
                            Name = "notifications",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4340)
                        },
                        new
                        {
                            Id = new Guid("6f727abe-6994-4de0-9ef7-d2696d307c42"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4342),
                            Name = "knowledge-bases",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4342)
                        },
                        new
                        {
                            Id = new Guid("0b88cd0b-46b0-4246-88f8-02b2fe02f72c"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4345),
                            Name = "profile",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4345)
                        },
                        new
                        {
                            Id = new Guid("e29d55c5-7323-40b1-a200-e0218768aad4"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4346),
                            Name = "supplements",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4347)
                        },
                        new
                        {
                            Id = new Guid("93f99c8e-348d-4d7e-b727-f6d34324aab9"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4348),
                            Name = "supplements-movements",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 281, DateTimeKind.Local).AddTicks(4348)
                        });
                });

            modelBuilder.Entity("ITControl.Domain.Positions.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ef9f50b-5aaa-4e76-a753-cf5d8a2ae72e"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 282, DateTimeKind.Local).AddTicks(3534),
                            Name = "Analista de Sistemas",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 282, DateTimeKind.Local).AddTicks(3539)
                        });
                });

            modelBuilder.Entity("ITControl.Domain.Roles.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 283, DateTimeKind.Local).AddTicks(4001),
                            Name = "Master",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 283, DateTimeKind.Local).AddTicks(4005)
                        });
                });

            modelBuilder.Entity("ITControl.Domain.Roles.Entities.RolePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesPages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8ea17cc-81f4-4d35-93ae-ef3c96db7ff7"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7133),
                            PageId = new Guid("749dce02-ab9d-4610-baff-809eee894042"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7137)
                        },
                        new
                        {
                            Id = new Guid("0a0e0236-22db-45a9-af91-49bfabbeffc3"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7143),
                            PageId = new Guid("51a3f4d2-b040-4ca4-9f8d-28c3a7354f98"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7143)
                        },
                        new
                        {
                            Id = new Guid("e6576513-c263-48f4-905d-0e47a152a392"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7144),
                            PageId = new Guid("60f79dd8-603c-4f9b-83eb-d4118cfea33a"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7145)
                        },
                        new
                        {
                            Id = new Guid("05c5a254-6c36-4531-855f-b9d04cccf026"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7152),
                            PageId = new Guid("65c29c14-e103-4468-bf5d-940713b7ba2f"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7152)
                        },
                        new
                        {
                            Id = new Guid("727f36d2-6f55-49ef-90d1-05800c63a444"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7153),
                            PageId = new Guid("d259704f-7392-4262-8890-4c0e43ebf29b"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7154)
                        },
                        new
                        {
                            Id = new Guid("71776100-afca-4ef8-9119-77e5b72f7599"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7155),
                            PageId = new Guid("75afe6a6-ab4c-4f60-8ce1-52482a25cd84"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7155)
                        },
                        new
                        {
                            Id = new Guid("922f39f5-8d4d-4c99-96f1-3be47a2cb729"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7156),
                            PageId = new Guid("b15822c6-8530-44f4-8d17-724ec6023f54"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7156)
                        },
                        new
                        {
                            Id = new Guid("cf85764c-cfaf-49f0-bb9a-0f3cd304a44d"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7157),
                            PageId = new Guid("073767f6-a715-4397-9512-21a923b7c32f"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7157)
                        },
                        new
                        {
                            Id = new Guid("e75fdc2b-3f6f-4716-b40a-beef458d01d4"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7158),
                            PageId = new Guid("06272051-eb58-4c68-bd4f-ba269d84b7bf"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7159)
                        },
                        new
                        {
                            Id = new Guid("e2faff93-790c-4204-aea2-f1bf421ed3cc"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7159),
                            PageId = new Guid("e989adab-519e-48e0-a548-b1a7c8fe8c7a"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7160)
                        },
                        new
                        {
                            Id = new Guid("b71112db-2956-4762-81c9-ed0e69770fc9"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7161),
                            PageId = new Guid("982d5605-d806-45b3-806b-d15d23fdc71d"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7162)
                        },
                        new
                        {
                            Id = new Guid("e8786ed3-0115-43b0-ba91-a4dbd56591df"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7164),
                            PageId = new Guid("120b8a7c-25c4-40d6-857e-26c0cfd4ac53"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7164)
                        },
                        new
                        {
                            Id = new Guid("c2b96f06-5ffc-4576-ad82-b50bec88a2e7"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7165),
                            PageId = new Guid("38735ff2-3f73-4573-a376-18ac71f9f349"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7166)
                        },
                        new
                        {
                            Id = new Guid("87467711-097f-4216-8e99-8ad75b7f8792"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7166),
                            PageId = new Guid("7c884fe4-1e55-4b10-b178-ce8ce37735f7"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7167)
                        },
                        new
                        {
                            Id = new Guid("fdb668cc-015f-434b-8fb3-915d4ef1a88c"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7168),
                            PageId = new Guid("6f727abe-6994-4de0-9ef7-d2696d307c42"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7168)
                        },
                        new
                        {
                            Id = new Guid("b50efb81-b5df-474a-a467-c1b27ec4aab2"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7232),
                            PageId = new Guid("0b88cd0b-46b0-4246-88f8-02b2fe02f72c"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7232)
                        },
                        new
                        {
                            Id = new Guid("d9e4af95-8e48-44b2-9693-53e2e05b5d01"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7234),
                            PageId = new Guid("e29d55c5-7323-40b1-a200-e0218768aad4"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7234)
                        },
                        new
                        {
                            Id = new Guid("e9d10cc1-70e4-47f1-bf44-1f423fd7da45"),
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7235),
                            PageId = new Guid("93f99c8e-348d-4d7e-b727-f6d34324aab9"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 284, DateTimeKind.Local).AddTicks(7235)
                        });
                });

            modelBuilder.Entity("ITControl.Domain.Supplements.Entities.Supplement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Supplements", (string)null);
                });

            modelBuilder.Entity("ITControl.Domain.SupplementsMovements.Entities.SupplementMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("MovementDate")
                        .HasColumnType("date");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("SupplementId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("SupplementsMovements", (string)null);
                });

            modelBuilder.Entity("ITControl.Domain.Systems.Entities.System", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("EndedAt")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ImplementedAt")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Own")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("ITControl.Domain.Treatments.Entities.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("EndedAt")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("EndedIn")
                        .HasColumnType("time");

                    b.Property<string>("ExternalProtocol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("StartedAt")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("StartedIn")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CallId");

                    b.HasIndex("Protocol")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("ITControl.Domain.Units.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ede57dd-949b-4416-b624-d51b1a9c60be"),
                            AddressNumber = "719",
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 292, DateTimeKind.Local).AddTicks(9678),
                            Name = "Paço Municipal",
                            Neighborhood = "Centro",
                            Phone = "1832659200",
                            PostalCode = "19600000",
                            StreetName = "Rua Marcílio Dias",
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 292, DateTimeKind.Local).AddTicks(9688)
                        });
                });

            modelBuilder.Entity("ITControl.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DivisionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Enrollment")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("Document")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UnitId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18ecdaa9-87bc-472b-bc20-e3e5544c1a3c"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 302, DateTimeKind.Local).AddTicks(4196),
                            DepartmentId = new Guid("554afc25-f71c-4532-99d9-11c93d2fe757"),
                            DivisionId = new Guid("25c13956-4296-46c6-bfce-4e8f28481e23"),
                            Document = "02912383005",
                            Email = "contato@rancharia.sp.gov.br",
                            Enrollment = 9999,
                            Name = "Administrador",
                            Password = "ANT1S9mR6Zl9GrE2couXbZwVBsQMkeInMX+W+DCaOOL2BipsgvmN71Hf13za1Qk1LQ==",
                            PositionId = new Guid("5ef9f50b-5aaa-4e76-a753-cf5d8a2ae72e"),
                            RoleId = new Guid("58a70ab0-6853-416c-a7c1-5ba0af5df69f"),
                            UnitId = new Guid("0ede57dd-949b-4416-b624-d51b1a9c60be"),
                            UpdatedAt = new DateTime(2025, 10, 29, 13, 57, 45, 302, DateTimeKind.Local).AddTicks(4212),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("ITControl.Domain.Users.Entities.UserEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("EndedAt")
                        .HasColumnType("date");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("StartedAt")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersEquipments");
                });

            modelBuilder.Entity("ITControl.Domain.Users.Entities.UserSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersSystems");
                });

            modelBuilder.Entity("ITControl.Domain.Appointments.Entities.Appointment", b =>
                {
                    b.HasOne("ITControl.Domain.Calls.Entities.Call", "Call")
                        .WithMany()
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Call");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITControl.Domain.Calls.Entities.Call", b =>
                {
                    b.HasOne("ITControl.Domain.Calls.Entities.CallStatus", "CallStatus")
                        .WithMany()
                        .HasForeignKey("CallStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Equipments.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ITControl.Domain.Systems.Entities.System", "System")
                        .WithMany()
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ITControl.Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CallStatus");

                    b.Navigation("Equipment");

                    b.Navigation("System");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITControl.Domain.Contracts.Entities.ContractContact", b =>
                {
                    b.HasOne("ITControl.Domain.Contracts.Entities.Contract", "Contract")
                        .WithMany("ContractContacts")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("ITControl.Domain.Divisions.Entities.Division", b =>
                {
                    b.HasOne("ITControl.Domain.Departments.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ITControl.Domain.Equipments.Entities.Equipment", b =>
                {
                    b.HasOne("ITControl.Domain.Contracts.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("ITControl.Domain.KnowledgeBases.Entities.KnowledgeBase", b =>
                {
                    b.HasOne("ITControl.Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITControl.Domain.Notifications.Entities.Notification", b =>
                {
                    b.HasOne("ITControl.Domain.Appointments.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ITControl.Domain.Calls.Entities.Call", "Call")
                        .WithMany()
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ITControl.Domain.Treatments.Entities.Treatment", "Treatment")
                        .WithMany()
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ITControl.Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Call");

                    b.Navigation("Treatment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITControl.Domain.Roles.Entities.RolePage", b =>
                {
                    b.HasOne("ITControl.Domain.Pages.Entities.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Roles.Entities.Role", "Role")
                        .WithMany("RolesPages")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ITControl.Domain.SupplementsMovements.Entities.SupplementMovement", b =>
                {
                    b.HasOne("ITControl.Domain.Departments.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Divisions.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ITControl.Domain.Supplements.Entities.Supplement", "Supplement")
                        .WithMany()
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Units.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Division");

                    b.Navigation("Supplement");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITControl.Domain.Systems.Entities.System", b =>
                {
                    b.HasOne("ITControl.Domain.Contracts.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("ITControl.Domain.Treatments.Entities.Treatment", b =>
                {
                    b.HasOne("ITControl.Domain.Calls.Entities.Call", "Call")
                        .WithMany()
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Call");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITControl.Domain.Users.Entities.User", b =>
                {
                    b.HasOne("ITControl.Domain.Departments.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Divisions.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Positions.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Roles.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Units.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Division");

                    b.Navigation("Position");

                    b.Navigation("Role");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ITControl.Domain.Users.Entities.UserEquipment", b =>
                {
                    b.HasOne("ITControl.Domain.Equipments.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Users.Entities.User", "User")
                        .WithMany("UsersEquipments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITControl.Domain.Users.Entities.UserSystem", b =>
                {
                    b.HasOne("ITControl.Domain.Systems.Entities.System", "System")
                        .WithMany()
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITControl.Domain.Users.Entities.User", "User")
                        .WithMany("UsersSystems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITControl.Domain.Contracts.Entities.Contract", b =>
                {
                    b.Navigation("ContractContacts");
                });

            modelBuilder.Entity("ITControl.Domain.Roles.Entities.Role", b =>
                {
                    b.Navigation("RolesPages");
                });

            modelBuilder.Entity("ITControl.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("UsersEquipments");

                    b.Navigation("UsersSystems");
                });
#pragma warning restore 612, 618
        }
    }
}
